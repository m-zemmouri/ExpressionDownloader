/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZEMMOURI_Downloader.File_SourceDestination;

namespace ZEMMOURI_Downloader.Variables
{
    /// <summary>
    /// This Classe Describes The Number Vars 
    /// </summary>
    public class Variable_Number : Variable
    {
        #region Constructor

        /// <summary>
        /// Constructor of NumberVar
        /// </summary>
        public Variable_Number()
            : base(VariableType.Number)
        {
        }


        /// <summary>
        /// Constructor of NumberVar
        /// </summary>
        /// <param name="VarSymbol">The Symbol how represents the Var</param>
        /// <param name="FirstValue">The First Value</param>
        /// <param name="LastValue">The Last Value</param>
        /// <param name="StepValue">The Step Value</param>
        /// <param name="addZerosValue">Add Zeros or not</param>
        public Variable_Number(string VarSymbol, int FirstValue, int LastValue, int StepValue, bool addZerosValue) :
            base(VarSymbol, VariableType.Number)
        {
            first = FirstValue;
            last = LastValue;
            step = StepValue;
            addZeros = addZerosValue;

        }

        #endregion

        #region Variables


        /// <summary>
        /// The First Value
        /// </summary>
        private int first;

        /// <summary>
        /// The Last Value
        /// </summary>
        private int last;

        /// <summary>
        /// The Step Value
        /// </summary>
        private int step;

        /// <summary>
        /// Add Zeros or not
        /// </summary>
        private bool addZeros;

        #endregion

        #region Proprieties


        /// <summary>
        /// Get Or Set The First Value
        /// </summary>
        public int First
        {
            get
            {
                return first;
            }
            set
            {
                first = value;
            }
        }

        /// <summary>
        /// Get Or Set The Last Value
        /// </summary>
        public int Last
        {
            get
            {
                return last;
            }
            set
            {
                last = value;
            }
        }

        /// <summary>
        /// Get Or Set The Step Value
        /// </summary>
        public int Step
        {
            get
            {
                return step;
            }
            set
            {
                step = value;
            }
        }

        /// <summary>
        /// Get Or Set Add Zeros or not
        /// </summary>
        public bool AddZeros
        {
            get
            {
                return addZeros;
            }
            set
            {
                addZeros = value;
            }
        }

        #endregion

        #region Methodes

        /// <summary>
        /// Return the string representation of the var.
        /// </summary>
        /// <returns>string representation of the var</returns>
        public override string ToString()
        {
            return "(" + Symbol + " : " + Type + " ; [" + First + "-" + Last + "]; " + Step + ")";
        }

        /// <summary>
        /// Evaluate a FileSourceDestination that contient a variable
        /// </summary>
        /// <param name="Expression">Expression FileSourceDestination to evaluate</param>
        /// <returns>a List of FileSourceDestination </returns>
        public override List<FileSourceDestination> Evaluate(FileSourceDestination Expression)
        {
            List<FileSourceDestination> result = new List<FileSourceDestination>();
            if (Expression.SymbolExist(Symbol))
            {
                string value;
                string zeros = "";
                int MaxLength = Math.Max(Last.ToString().Length, First.ToString().Length);

                if (AddZeros)
                {
                    for (int j = 0; j < MaxLength; j++)
                        zeros += "0";
                }

                for (int i = First; i <= Last; i += Step)
                {
                    value = i.ToString();
                    if (AddZeros)
                    {
                        value = zeros.Substring(0, MaxLength - value.Length) + value;
                    }
                    result.Add(Expression.SymbolReplace(Symbol, value));
                }
            }
            else
            {
                result.Add(Expression);
            }
            return result;
        }


        #endregion
    }
}
