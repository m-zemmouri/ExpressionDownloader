/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZEMMOURI_Downloader.File_SourceDestination;

namespace ZEMMOURI_Downloader.Variables
{
   
        /// <summary>
        /// This Classe Describes The Collection Vars
        /// </summary>
        public class Variable_Collection : Variable
        {
            #region Constructor

            /// <summary>
            /// The Constructor of VarCollection
            /// </summary>
            public Variable_Collection()
                : base(VariableType.Collection)
            {
                words = new List<string>();
            }

            /// <summary>
            /// The Constructor of VarCollection
            /// </summary>
            /// <param name="VarSymbol">The Symbol how represents the Var</param>
            /// <param name="ListWords">The of List Words</param>
            public Variable_Collection(string VarSymbol, List<string> ListWords)
                : base(VarSymbol, VariableType.Collection)
            {
                words = ListWords;
            }

            #endregion

            #region Variables


            /// <summary>
            /// The of List Words
            /// </summary>
            private List<string> words;

            #endregion

            #region Proprieties


            /// <summary>
            /// Get Or Set The of List Words
            /// </summary>
            public List<string> Words
            {
                get
                {
                    return words;
                }
                set
                {
                    words = value;
                }
            }

            #endregion

            #region Methodes
            
            /// <summary>
            /// Return the string representation of the var.
            /// </summary>
            /// <returns>string representation of the var</returns>
            public override string ToString()
            {
                return "(" + Symbol + " : " + Type + " ; [...]; )";
            }
                        
            /// <summary>
            /// Evaluate a FileSourceDestination that contient a variable
            /// </summary>
            /// <param name="Expression">Expression FileSourceDestination to evaluate</param>
            /// <returns>a List of FileSourceDestination </returns>
            public override List<FileSourceDestination> Evaluate(FileSourceDestination Expression)
            {
                List<FileSourceDestination> result = new List<FileSourceDestination>();
                if (Expression.SymbolExist(Symbol))
                {
                    string value;
                    foreach (string word in Words)
                    {
                        value = word;
                        result.Add(Expression.SymbolReplace(Symbol, value));
                    }
                }
                else
                {
                    result.Add(Expression);
                }
                return result;
            }

            
            #endregion     
        }
    }
