/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZEMMOURI_Downloader.File_SourceDestination;

namespace ZEMMOURI_Downloader.Variables
{

    /// <summary>
    /// This Classe Describes The Letter Vars 
    /// </summary>
    public class Variable_Letter : Variable
    {
        #region Constructor

        /// <summary>
        /// The Constructor of LetterVar
        /// </summary>
        public Variable_Letter()
            : base(VariableType.Letter)
        {
        }

        /// <summary>
        /// The Constructor of LetterVar
        /// </summary>
        /// <param name="VarSymbol">The Symbol how represents the Var</param>
        /// <param name="FirstValue">The First Value</param>
        /// <param name="LastValue">The Last Value</param>
        /// <param name="StepValue">The Step Value</param>
        public Variable_Letter(string VarSymbol, char FirstValue, char LastValue, int StepValue)
            : base(VarSymbol, VariableType.Letter)
        {
            first = FirstValue;
            last = LastValue;
            step = StepValue;
        }
        #endregion

        #region Variables


        /// <summary>
        /// The First Value
        /// </summary>
        private char first;

        /// <summary>
        /// The Last Value
        /// </summary>
        private char last;

        /// <summary>
        /// The Step Value
        /// </summary>
        private int step;


        #endregion

        #region Proprieties


        /// <summary>
        /// Get Or Set The First Value
        /// </summary>
        public char First
        {
            get
            {
                return first;
            }
            set
            {
                first = value;
            }
        }

        /// <summary>
        /// Get Or Set The Last Value
        /// </summary>
        public char Last
        {
            get
            {
                return last;
            }
            set
            {
                last = value;
            }
        }

        /// <summary>
        /// Get Or Set The Step Value
        /// </summary>
        public int Step
        {
            get
            {
                return step;
            }
            set
            {
                step = value;
            }
        }

        #endregion

        #region Methodes
        /// <summary>
        /// get the index of the char in our list letters
        /// </summary>
        /// <param name="c">A char</param>
        /// <returns>index of the char</returns>
        int GetIndex(char c)
        {
            for (int i = 0; i < Program.Letters.Length; i++)
            {
                if (Program.Letters[i].Equals(c.ToString().ToLower()))
                    return i;
            }
            return -1;

        }

        /// <summary>
        /// Get a char from a list of letters
        /// </summary>
        /// <param name="index">the index of char</param>
        /// <returns>a Char</returns>
        char GetChar(int index)
        {
            return Program.Letters[index][0];
        }

        /// <summary>
        /// Return the string representation of the var.
        /// </summary>
        /// <returns>string representation of the var</returns>
        public override string ToString()
        {
            return "(" + Symbol + " : " + Type + " ; [" + First + "-" + Last + "]; " + Step + ")";
        }

        /// <summary>
        /// Evaluate a FileSourceDestination that contient a variable
        /// </summary>
        /// <param name="Expression">Expression FileSourceDestination to evaluate</param>
        /// <returns>a List of FileSourceDestination </returns>
        public override List<FileSourceDestination> Evaluate(FileSourceDestination Expression)
        {
            List<FileSourceDestination> result = new List<FileSourceDestination>();
            if (Expression.SymbolExist(Symbol))
            {
                string value;
                int FirstIndex = GetIndex(First);
                if (FirstIndex == -1)
                    FirstIndex = 0;

                int LastIndex = GetIndex(Last);
                if (LastIndex == -1)
                    LastIndex = Program.Letters.Length - 1;

                for (int index = FirstIndex; index <= LastIndex; index += Step)
                {
                    value = GetChar(index).ToString();
                    result.Add(Expression.SymbolReplace(Symbol, value));
                }
            }
            else
            {
                result.Add(Expression);
            }
            return result;
        }

        #endregion
    }
}