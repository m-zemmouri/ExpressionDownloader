/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ZEMMOURI_Downloader.File_SourceDestination;

namespace ZEMMOURI_Downloader.Variables
{

    /// <summary>
    /// This Classe Describes The Vars
    /// </summary>
    public class Variable
    {
        #region Constructor

        /// <summary>
        /// Constructor of Var
        /// </summary>
        public Variable()
        {
        }

        /// <summary>
        /// Constructor of Var
        /// </summary>
        /// <param name="TypeVar">The Type of the Variable</param>
        public Variable(VariableType TypeVar)
        {
            type = TypeVar;
        }

        /// <summary>
        /// Constructor of Var
        /// </summary>
        /// <param name="SymbolVar">The Symbol how represents the Var</param>
        /// <param name="TypeVar">The Type of the Variable</param>
        public Variable(string SymbolVar, VariableType TypeVar)
        {
            symbol = SymbolVar;
            type = TypeVar;
        }

        #endregion

        #region Variables


        /// <summary>
        /// The Symbol how represents the Var
        /// </summary>
        private string symbol;

        /// <summary>
        /// The Type of the Variable
        /// </summary>
        private VariableType type;

        #endregion

        #region Proprieties


        /// <summary>
        /// The Symbol how represents the Var
        /// </summary>
        public string Symbol
        {
            get
            {
                return symbol;
            }
            set
            {
                symbol = value;
            }
        }

        /// <summary>
        /// The Type of the Variable
        /// </summary>
        public VariableType Type
        {
            get
            {
                return type;
            }
            set
            {
                type = value;
            }
        }

        /// <summary>
        /// String representation of the var
        /// </summary>
        public string VarToString
        {
            get
            {
                return ToString();
            }
        }

        #endregion

        #region Methodes

        /// <summary>
        /// Return the string representation of the var.
        /// </summary>
        /// <returns>string representation of the var</returns>
        public virtual string ToString()
        {
            return "(" + Symbol + " : " + Type + " ; [-]; )";
        }

        /// <summary>
        /// Evaluate a string that contient a variable
        /// </summary>
        /// <param name="Expression">string to evaluate</param>
        /// <returns>a List of string </returns>
        public virtual List<FileSourceDestination> Evaluate(FileSourceDestination Expression)
        {
            return null;
        }

        /// <summary>
        /// Evaluate a list of string that contient a variable
        /// </summary>
        /// <param name="ListExpressions">The List of string to evaluate</param>
        /// <returns>a List of string </returns>
        public List<FileSourceDestination> Evaluate(List<FileSourceDestination> ListExpressions)
        {
            List<FileSourceDestination> result = new List<FileSourceDestination>();
            foreach (FileSourceDestination Expression in ListExpressions)
            {
                result.AddRange(Evaluate(Expression));
            }
            return result;
        }
        #endregion

    }
}
