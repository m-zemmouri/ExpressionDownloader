/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.Xml;
using System.IO;

namespace ZEMMOURI_Downloader.Variables
{
    public class ListVariables
    {

        #region Constructor

        /// <summary>
        /// The Constructor of ExpressionDownload
        /// </summary>
        public ListVariables()
        {

        }
        
        /// <summary>
        /// Constructor of ListVariables
        /// </summary>
        /// <param name="ListVariables">List of Var’s</param>
        public ListVariables(List<Variable> ListVariables)
        {
            listVars = ListVariables;
        }


        #endregion

        #region Variables


        /// <summary>
        /// List of Number Var’s proprieties
        /// </summary>
        
        #endregion

        #region Proprieties


        /// <summary>
        /// Get Or Set List of Number Var’s proprieties
        /// </summary>
        [XmlArrayAttribute("ListVars")]
        public List<Variable> ListVars
        {
            get
            {
                return listVars;
            }
            set
            {
                listVars = value;
            }
        }

        #endregion

        #region Methodes

        /// <summary>
        /// Evaluate a string that contient a variable
        /// </summary>
        /// <param name="Expression">string to evaluate</param>
        /// <returns>a List of string </returns>
        public List<string> Evaluate(string Expression)
        {
            List<string> result = new List<string>();
            result.Add(Expression);
            foreach (Variable var in ListVars)
            {
                result = var.Evaluate(result);
            }            
            return null;
        }

        
        #endregion

    }

    /* Auther Methode
        class ListVariables
        {

            #region Constructor

            /// <summary>
            /// The Constructor of ExpressionDownload
            /// </summary>
            public ListVariables()
            {
                
            }

            /// <summary>
            /// Constructor of ListVariables
            /// </summary>
            /// <param name="ListNumberVars">List of Number Var’s proprieties</param>
            /// <param name="ListLetterVars">List of Letter Var’s proprieties</param>
            /// <param name="ListCollectionVars">List of Collection Var’s proprieties</param>
            public ListVariables(List<Variable_Number> ListNumberVars, List<Variable_Letter> ListLetterVars, List<Variable_Collection> ListCollectionVars)
            {
                listVarsNumber = ListNumberVars;
                listVarsLetter = ListLetterVars;
                listVarsCollection = ListCollectionVars;
            }


            #endregion

            #region Variables


            /// <summary>
            /// List of Number Var’s proprieties
            /// </summary>
            private List<Variable_Number> listVarsNumber = new List<Variable_Number>();

            /// <summary>
            /// List of Letter Var’s proprieties
            /// </summary>
            private List<Variable_Letter> listVarsLetter = new List<Variable_Letter>();

            /// <summary>
            /// List of Collection Var’s proprieties
            /// </summary>
            private List<Variable_Collection> listVarsCollection = new List<Variable_Collection>();

            #endregion

            #region Proprieties


            /// <summary>
            /// Get Or Set List of Number Var’s proprieties
            /// </summary>
            public List<Variable_Number> ListVarsNumber
            {
                get
                {
                    return listVarsNumber;
                }
                set
                {
                    listVarsNumber = value;
                }
            }

            /// <summary>
            /// Get Or Set List of Letter Var’s proprieties
            /// </summary>
            public List<Variable_Letter> ListVarsLetter
            {
                get
                {
                    return listVarsLetter;
                }
                set
                {
                    listVarsLetter = value;
                }
            }

            /// <summary>
            /// Get Or Set List of Collection Var’s proprieties
            /// </summary>
            public List<Variable_Collection> ListVarsCollection
            {
                get
                {
                    return listVarsCollection;
                }
                set
                {
                    listVarsCollection = value;
                }
            }

            #endregion

            #region Methodes

            /// <summary>
            /// Evaluate a string that contient a variable
            /// </summary>
            /// <param name="Expression">string to evaluate</param>
            /// <returns>a List of string </returns>
            public List<string> Evaluate(string Expression)
            {
                List<string> result = new List<string>();
                result.Add(Expression);




                foreach (Variable_Number var in ListVarsNumber)
                {
                    result = var.Evaluate(result);
                }
                foreach (Variable_Letter var in ListVarsLetter)
                {
                    result = var.Evaluate(result);
                }
                foreach (Variable_Collection var in ListVarsCollection)
                {
                    result = var.Evaluate(result);
                }          


                return null;
            }
            

            #endregion

        }

     */
}
