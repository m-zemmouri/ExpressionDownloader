/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.Xml;
using System.IO;
using ZEMMOURI_Downloader.Variables;
using ZEMMOURI_Downloader.File_SourceDestination;

namespace ZEMMOURI_Downloader
{
    /// <summary>
    /// Expression to Download 
    /// </summary>
    public class ExpressionDownload
    {
        #region Constructor

        /// <summary>
        /// The Constructor of ExpressionDownload
        /// </summary>
        public ExpressionDownload()
        {
        }

        /// <summary>
        /// Constructor of ExpressionDownload
        /// </summary>
        /// <param name="SourceExpression">Source Expression Value to Download</param>
        /// <param name="DestinationExpression">Destination Expression Directory</param>
        /// <param name="ListVariables">List of Var’s</param>
        public ExpressionDownload(string SourceExpression, string DestinationExpression, List<Variable> ListVariables)
        {
            this.source = SourceExpression;
            this.destination = DestinationExpression;
            this.listVariables = ListVariables;
        }


        #endregion

        #region Variables


        /// <summary>
        /// The Source's Expression to Download
        /// </summary>
        private string source;

        /// <summary>
        /// Destination Directory
        /// </summary>
        private string destination;

        /// <summary>
        /// List of  Var’s proprieties
        /// </summary>
        private List<Variable> listVariables = new List<Variable>();

        #endregion

        #region Proprieties


        /// <summary>
        /// Get Or Set The Source's Expression to Download
        /// </summary>
        public string Source
        {
            get
            {
                return source;
            }
            set
            {
                source = value;
            }
        }

        /// <summary>
        /// Get Or Set Destination Directory
        /// </summary>
        public string Destination
        {
            get
            {
                return destination;
            }
            set
            {
                destination = value;
            }
        }

        /// <summary>
        /// Get Or Set List of  Var’s proprieties
        /// </summary>
        [XmlArrayAttribute("ListVariables")]
        public List<Variable> ListVariables
        {
            get
            {
                return listVariables;
            }
            set
            {
                listVariables = value;
            }
        }

        #endregion

        #region Methodes

        /// <summary>
        /// Evaluate the Expression
        /// </summary>
        /// <returns>a List of FileSourceDestination </returns>
        public List<FileSourceDestination> Evaluate()
        {
            List<FileSourceDestination> result = new List<FileSourceDestination>();
            result.Add(new FileSourceDestination(source,destination));
            foreach (Variable var in ListVariables)
            {
                result = var.Evaluate(result);
            }
            return result;
        }

        
        /// <summary>
        /// Add A variable to the list
        /// </summary>
        /// <param name="var">a Variable</param>
        public void AddVar(Variable var)
        {
            ListVariables.Add(var);
        }

        /// <summary>
        /// Remove A variable from the list
        /// </summary>
        /// <param name="var">a Variable</param>
        public void RemoveVar(Variable var)
        {
            ListVariables.Remove(var);
        }

        #endregion

        #region XmlSerialization

        /// <summary>
        /// Export a descriptiont To an XML File
        /// </summary>
        /// <param name="description">Classe Description</param>
        /// <param name="XMLFileName">The path of the Destination XML File</param>
        static public void WriteToXML(ExpressionDownload description, String XMLFileName)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(ExpressionDownload));
            TextWriter writer = new StreamWriter(XMLFileName);
            serializer.Serialize(writer, description);
            writer.Close();
        }

        /// <summary>
        /// Import a descriptiont from an XML File
        /// </summary>
        /// <param name="XMLFileName">The path of the XML File</param>
        /// <returns>ExpressionDownload</returns>
        static public ExpressionDownload ReadFromXML(String XMLFileName)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(ExpressionDownload));
            FileStream fs = new FileStream(XMLFileName, FileMode.Open);
            return (ExpressionDownload)serializer.Deserialize(fs);
        }

        #endregion

    }
}