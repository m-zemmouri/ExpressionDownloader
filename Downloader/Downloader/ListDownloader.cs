/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.IO;
using System.Net;
using ZEMMOURI_Downloader.File_State;

namespace ZEMMOURI_Downloader.Downloader
{


    /// <summary>
    /// Describes a List of Files to Download, it is a List of FileState
    /// </summary>
    public class ListDownloader
    {
        #region Constructor

        /// <summary>
        /// Constructor of ListDownloaders
        /// </summary>
        public ListDownloader()
        {
            ResizeList();
        }

        /// <summary>
        /// Constructor of ListDownloaders
        /// </summary>
        /// <param name="MaxSimetaneouseDownloads">The Max Number of Simetaneouse downloads</param>
        /// <param name="ListFilesState">List of Files State.</param>
        public ListDownloader(decimal MaxSimetaneouseDownloads, ListFileState ListFilesState)
        {
            maxDownloads = MaxSimetaneouseDownloads;
            listFiles = ListFilesState;
            ResizeList();
        }

        #endregion

        #region Variables


        /// <summary>
        /// List of Downloader
        /// </summary>
        private List<Downloader> items = new List<Downloader>();

        /// <summary>
        /// The Max Number of Simetaneouse downloads
        /// </summary>
        private decimal maxDownloads = Program.DefaultMaxDownloads;

        /// <summary>
        /// List of Files State.
        /// </summary>
        private ListFileState listFiles;

        /// <summary>
        /// Counter to set the ID for Downloaders
        /// </summary>
        private uint CurrentID = 1;

        #endregion

        #region Proprieties


        /// <summary>
        /// List of Downloaders
        /// </summary>
        [XmlArrayAttribute("Items")]
        public List<Downloader> Items
        {
            get
            {
                return items;
            }
            set
            {
                items = value;
            }
        }

        /// <summary>
        /// The Max Number of Simetaneouse downloads
        /// </summary>
        public decimal MaxDownloads
        {
            get
            {
                return maxDownloads;
            }
            set
            {
                if (maxDownloads != value)
                {
                    maxDownloads = value;
                    ResizeList();
                }
            }
        }

        /// <summary>
        /// List of Files State.
        /// </summary>
        public ListFileState ListFiles
        {
            get
            {
                return listFiles;
            }
            set
            {
                listFiles = value;
            }
        }

        #endregion

        #region Indexor

        /// <summary>
        /// Indexor of Downloaders
        /// </summary>
        /// <param name="i">Item Ranke</param>
        /// <returns>Downloader</returns>
        public Downloader this[int i]
        {
            get
            {
                return items[i];
            }
            set
            {
                items[i] = value;
            }
        }

        #endregion

        #region Methodes

        /// <summary>
        /// Get a Ready Downloader
        /// </summary>
        /// <returns>a Ready Downloader</returns>
        private Downloader GetReadyDownloader()
        {
            Downloader result = null;
            for (int i = 0; i < items.Count; i++)
            {
                if (items[i].State == DownloaderState.Ready)
                {
                    result = items[i];
                }
            }
            return result;
        }

        /// <summary>
        /// Get a the Downloader by his ID
        /// </summary>
        /// <param name="DownloaderID">Downloader's ID</param>
        /// <returns>a Downloader</returns>
        private Downloader GetDownloader(uint DownloaderID)
        {
            Downloader result = null;
            for (int i = 0; i < items.Count; i++)
            {
                if (items[i].ID == DownloaderID)
                {
                    result = items[i];
                }
            }
            return result;
        }

        /// <summary>
        /// Resize the List of Downloaders
        /// </summary>
        private void ResizeList()
        {
            // Add if( Downloaders.Count < MaxDownloads)
            while (items.Count < MaxDownloads)
            {
                AddNewDownloader();
            }

            int i = 0;
            // Remove if( Downloaders.Count > MaxDownloads)
            while (i < items.Count && items.Count > MaxDownloads)
            {
                if (items[i].State == DownloaderState.Ready)
                {
                    items.Remove(items[i]);
                }
                else
                {
                    i++;
                }
            }
        }

        /// <summary>
        /// Add a New Downloader to the List
        /// </summary>
        private void AddNewDownloader()
        {
            Downloader Downloader = new Downloader(CurrentID);
            CurrentID++;
            //ToDo: add methode DownloadNext to the event 
            items.Add(Downloader);
            DownloadNext();
        }

        /// <summary>
        /// Download the Next File
        /// </summary>
        public void DownloadNext()
        {
            ResizeList();
            Downloader downloader = GetReadyDownloader();
            if (downloader != null && ListFiles != null)
            {
                FileState NextFile = ListFiles.GetNext();
                downloader.Download(NextFile);
            }
        }

        /// <summary>
        /// Dispose the Object
        /// </summary>
        public void Dispose()
        {
            StopAll();
            foreach (Downloader downloader in items)
                downloader.Client.Dispose();
        }

        /// <summary>
        /// Stop All Downloads
        /// </summary>
        public void StopAll()
        {
            foreach (Downloader downloader in items)
                downloader.Stop();
        }

        /// <summary>
        /// Stop One Download
        /// </summary>
        /// <param name="DownloaderID">Downloader's ID</param>
        public void Stop(uint DownloaderID)
        {

            Downloader downloader = GetDownloader(DownloaderID);
            if (downloader != null)
            {
                downloader.Stop();
            }
        }

        /// <summary>
        /// Stop the Download of a file
        /// </summary>
        /// <param name="FileID">File's ID</param>
        public void StopFile(uint FileID)
        {
            for (int i = 0; i < items.Count; i++)
            {
                if (items[i].FileState.ID == FileID)
                {
                    items[i].Stop();
                }
            }            
        }

        /// <summary>
        /// Pause All Downloads
        /// </summary>
        public void PauseAll()
        {
            foreach (Downloader downloader in items)
                downloader.Pause();
        }

        /// <summary>
        /// Pause One Download
        /// </summary>
        /// <param name="DownloaderID"></param>
        public void Pause(uint DownloaderID)
        {
            Downloader downloader = GetDownloader(DownloaderID);
            if (downloader != null)
            {
                downloader.Pause();
            }
        }

        #endregion

        #region XmlSerialization

        /// <summary>
        /// Export a List of FileState To an XML File
        /// </summary>
        /// <param name="list">List of FileState</param>
        /// <param name="XMLFileName">The path of the Destination XML File</param>
        static public void WriteToXML(ListDownloader list, String XMLFileName)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(ListDownloader));
            TextWriter writer = new StreamWriter(XMLFileName);
            serializer.Serialize(writer, list);
            writer.Close();
        }

        /// <summary>
        /// Import a List of FileState from an XML File
        /// </summary>
        /// <param name="XMLFileName">The path of the XML File</param>
        /// <returns>ListDownloaders</returns>
        static public ListDownloader ReadFromXML(String XMLFileName)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(ListDownloader));
            FileStream fs = new FileStream(XMLFileName, FileMode.Open);
            return (ListDownloader)serializer.Deserialize(fs);
        }

        #endregion

    }
}