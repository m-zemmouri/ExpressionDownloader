/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.IO;
using System.Windows.Forms;
using ZEMMOURI_Downloader.File_SourceDestination;

namespace ZEMMOURI_Downloader.File_State
{

    /// <summary>
    /// Describes a List of Files to Download, it is a List of FileState
    /// </summary>
    public class ListFileState
    {
        #region Constructor

        /// <summary>
        /// Constructor of ListFileState
        /// </summary>
        public ListFileState()
        {
        }

        /// <summary>
        /// Constructor of ListFileState
        /// </summary>
        /// <param name="listFileDownloadInfo">ListFileDownloadInfo</param>
        public ListFileState(ListFileSourceDestination listFileDownloadInfo)
        {
            for (int i = 0; i < listFileDownloadInfo.Items.Count; i++)
                AddFileState(listFileDownloadInfo[i].Source, listFileDownloadInfo[i].Destination);
        }

        #endregion

        #region Variables


        /// <summary>
        /// List of FileState
        /// </summary>
        private List<FileState> items = new List<FileState>();

        /// <summary>
        /// Counter to set the ID for Files
        /// </summary>
        private uint CurrentID = 1;

        /// <summary>
        /// The default reponse if the file exists.
        /// </summary>
        private Response defaultResponse = Response.None;

        #endregion

        #region Proprieties


        /// <summary>
        /// List of FileState
        /// </summary>
        [XmlArrayAttribute("FilesStates")]
        public List<FileState> Items
        {
            get
            {
                return items;
            }
            set
            {
                items = value;
            }
        }

        #endregion

        #region Indexor

        /// <summary>
        /// Indexor of ListFileState
        /// </summary>
        /// <param name="i">Item Ranke</param>
        /// <returns>FileState</returns>
        public FileState this[int i]
        {
            get
            {
                return items[i];
            }
            set
            {
                items[i] = value;
            }
        }

        #endregion

        #region Methodes

        /// <summary>
        /// Add FileState to the list
        /// </summary>
        /// <param name="FileSource">The Source of File</param>
        /// <param name="Destination">The File Destination (Root Directory or File Name)</param>
        public void AddFileState(string FileSource, string Destination)
        {
            FileState fileState = new FileState(CurrentID, FileSource, Destination);
            items.Add(fileState);
            CurrentID++;
        }

        /// <summary>
        /// Get the next file (with a specific State) to download
        /// </summary>
        /// <param name="downloadState">DownloadState</param>
        /// <returns>FileState</returns>
        public FileState GetNext(DownloadState downloadState)
        {
            FileState result = null;
            for (int i = 0; i < items.Count; i++)
            {
                if (items[i].State == downloadState)
                {
                    items[i].Destination = FileExist(items[i].Destination);
                    result = items[i];
                    break;
                }
            }
            return result;
        }

        /// <summary>
        /// Get the next file to download
        /// </summary>
        /// <returns>FileState</returns>
        public FileState GetNext()
        {
            FileState result = null;
            if (result == null)
            {
                result = GetNext(DownloadState.Paused);
            }
            if (result == null)
            {
                result = GetNext(DownloadState.Ready);
            }
            if (result == null)
            {
                result = GetNext(DownloadState.Error);
            }
            return result;
        }

        /// <summary>
        /// Vérify if the file exists with the same name, and return a new name
        /// </summary>
        /// <param name="FileName">the File Name</param>
        /// <returns>The new name</returns>
        private string FileExist(string FileName)
        {
            while (File.Exists(FileName))
            {
                Response response = defaultResponse;
                if (response == Response.None)
                {
                    FormFileExists formFileExists = new FormFileExists(FileName);

                    response = formFileExists.response;

                    if (formFileExists.checkBoxDefaultResponse.Checked)
                        defaultResponse = response;
                }

                switch (response)
                {
                    case Response.Overwrite:
                        File.Delete(FileName);
                        break;
                    case Response.AutoRename:
                        FileName = Program.AutoRename(FileName);
                        break;
                    case Response.SaveAs:
                        SaveFileDialog saveFileDialog = new SaveFileDialog();
                        saveFileDialog.Title = "Save As";
                        if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        {
                            FileName = saveFileDialog.FileName;
                        }
                        else
                        {
                            FileName = Program.AutoRename(FileName);
                        }
                        break;
                    case Response.Cancel:
                        return null;
                }
            }
            return FileName;
        }


        #endregion

        #region XmlSerialization

        /// <summary>
        /// Export a List of FileState To an XML File
        /// </summary>
        /// <param name="list">List of FileState</param>
        /// <param name="XMLFileName">The path of the Destination XML File</param>
        static public void WriteToXML(ListFileState list, String XMLFileName)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(ListFileState));
            TextWriter writer = new StreamWriter(XMLFileName);
            serializer.Serialize(writer, list);
            writer.Close();
        }

        /// <summary>
        /// Import a List of FileState from an XML File
        /// </summary>
        /// <param name="XMLFileName">The path of the XML File</param>
        /// <returns>ListFileState</returns>
        static public ListFileState ReadFromXML(String XMLFileName)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(ListFileState));
            FileStream fs = new FileStream(XMLFileName, FileMode.Open);
            return (ListFileState)serializer.Deserialize(fs);
        }

        #endregion

    }
}