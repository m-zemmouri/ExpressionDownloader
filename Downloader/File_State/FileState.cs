/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using ZEMMOURI_Downloader.File_SourceDestination;
using System.IO;
using ZEMMOURI_Downloader.File_State.File_Part;

namespace ZEMMOURI_Downloader.File_State
{

    /// <summary>
    /// Describes The File to Download by :
    /// - ID
    /// - Name
    /// - Source
    /// - Destination
    /// - Download State (ready, Downloading, Ok, Error, Stoped, Aborted)
    /// - Size
    /// - Recieved Data
    /// - Progress
    /// - Start Time
    /// - Elapsed Time
    /// - Finish Time
    /// - The number of Tries
    /// - The Parts of the File
    /// </summary>
    public class FileState : FileSourceDestination
    {
        #region Constructor

        /// <summary>
        /// Constructor of FileState
        /// </summary>
        public FileState()
            : base()
        {
        }

        /// <summary>
        /// Constructor of FileState
        /// </summary>
        /// <param name="ID">The ID of File</param>
        /// <param name="FileSource">The Source of File</param>
        /// <param name="Destination">The File Destination (Root Directory or File Name)</param>
        public FileState(uint ID, string FileSource, string Destination)
            : base(FileSource, Destination)
        {
            iD = ID;
        }

        #endregion

        #region Variables

        /// <summary>
        /// File ID
        /// </summary>
        private uint iD;

        /// <summary>
        /// Download State (ready, Downloading, Ok, Error, Stoped)
        /// </summary>
        private DownloadState state = DownloadState.Ready;

        /// <summary>
        /// File's Size
        /// </summary>
        private long size;

        /// <summary>
        /// Recieved Data
        /// </summary>
        private long recievedData = 0;

        /// <summary>
        /// Download Progress
        /// </summary>
        private int progress = 0;

        /// <summary>
        /// Time of Start Download
        /// </summary>
        private DateTime startTime;

        /// <summary>
        /// Elapsed Time in Dowloading
        /// </summary>
        private TimeSpan elapsedTime = new TimeSpan(0);

        /// <summary>
        /// Time of Finish Download
        /// </summary>
        private DateTime finishTime;

        /// <summary>
        /// The number of Tries
        /// </summary>
        private decimal nbTries = 0;

        /// <summary>
        /// List of Parts
        /// </summary>
        private ListFilePart parts = new ListFilePart();

        #endregion

        #region Proprieties

        /// <summary>
        /// File ID
        /// </summary>
        public uint ID
        {
            get
            {
                return iD;
            }
            set
            {
                iD = value;
            }
        }

        /// <summary>
        /// Download State (ready, Downloading, Ok, Error, Aborted, Stoped)
        /// </summary>
        public DownloadState State
        {
            get
            {
                return state;
            }
            set
            {
                if (value == DownloadState.Error && NbTries == Program.MaxTries)
                {
                    state = DownloadState.Aborted;
                }
                else
                {
                    state = value;
                }
            }
        }

        /// <summary>
        /// File's Size
        /// </summary>
        public long Size
        {
            get
            {
                return size;
            }
            set
            {
                size = value;
            }
        }

        /// <summary>
        /// Recieved Data
        /// </summary>
        public long RecievedData
        {
            get
            {
                return recievedData;
            }
            set
            {
                recievedData = value;
            }
        }

        /// <summary>
        /// Download Progress
        /// </summary>
        public int Progress
        {
            get
            {
                return progress;
            }
            set
            {
                progress = value;
            }
        }

        /// <summary>
        /// Time of Start Download
        /// </summary>
        public DateTime StartTime
        {
            get
            {
                return startTime;
            }
            set
            {
                startTime = value;
            }
        }

        /// <summary>
        /// Elapsed Time in Dowloading
        /// </summary>
        public TimeSpan ElapsedTime
        {
            get
            {
                elapsedTime = System.DateTime.Now - StartTime;
                return elapsedTime;
            }
            set
            {
                elapsedTime = value;
            }
        }

        /// <summary>
        /// Time of Finish Download
        /// </summary>
        public DateTime FinishTime
        {
            get
            {
                return finishTime;
            }
            set
            {
                finishTime = value;
            }
        }

        /// <summary>
        /// The number of Triesime
        /// </summary>
        public decimal NbTries
        {
            get
            {
                return nbTries;
            }
            set
            {
                nbTries = value;
            }
        }

        /// <summary>
        /// List of Parts
        /// </summary>
        [XmlArrayAttribute("File Parts")]
        public ListFilePart Parts
        {
            get
            {
                return parts;
            }
            set
            {
                parts = value;
            }
        }


        #endregion

        #region Methodes

        private void LoudParts(string PartsPath)
        {
            string partPath;
            //Export to an XML File
            ListFilePart.WriteToXML(parts, PartsPath);
            foreach (FilePart part in parts.Items)
            {
                partPath = Program.GetTemporaryName(Destination, "Part "+part.Range.ToString());
                part.AdjustCurrentPosition(partPath);
            }       
        }
            
        /// <summary>
        /// Fragments the File in Parts.
        /// </summary>
        private void Fragment()
        {
            string PartsPath = Program.GetTemporaryName(Destination, "Parts");
                

            if (File.Exists(PartsPath))
            {
                LoudParts(PartsPath);
            }
            else
            {
                //TODO: review
                int starPosition = 0;
                int endPosition = -1;
                string partPath = Program.GetTemporaryName(Destination, "Part 1");                
           
                parts.Add(starPosition, endPosition);

                //Export to an XML File
                ListFilePart.WriteToXML(parts, PartsPath);

            }
        }

        /// <summary>
        /// Prepars the download of the file.
        /// </summary>
        public void Prepare()
        {
            if ( !string.IsNullOrEmpty(Destination)            )
            {
                string DirectoryTemporaryName = Program.GetTemporaryName(Destination);

                if (!Directory.Exists(DirectoryTemporaryName))
                {
                    Directory.CreateDirectory(DirectoryTemporaryName);
                }

                Fragment();
            }
        }
        /// <summary>
        /// Collect the Parts and Build the file.
        /// </summary>
        public void Collect()
        {
            FileStream fileStream;
            FileStream partStream;
            string PartPath;
            byte[] buffer = new byte[1024];
            int BytesCount;
            //Create the file.
            fileStream = File.Create(Destination);
            for (int i = 0; i < parts.Items.Count; i++)
            {
                PartPath = Program.GetTemporaryName(Destination, "Part " + parts[i].Range);
                partStream = File.OpenRead(PartPath);
                do
                {
                    BytesCount = partStream.Read(buffer, 0, buffer.Length);
                    fileStream.Write(buffer, 0, BytesCount);
                } while (BytesCount > 0);
                File.Delete(PartPath);
            }
            fileStream.Close();
            Directory.Delete(PartPath = Program.GetTemporaryName(Destination),true);
        }


        
        #endregion
    }
}