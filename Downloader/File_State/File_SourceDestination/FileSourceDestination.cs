/*
* ============================================================================
* THIS CODE IS GENERATED BY 'ClasseCodeGenerator'
* ZEMMOURI Mohamed m.zemmouri@gmail.com
* ============================================================================
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace ZEMMOURI_Downloader.File_SourceDestination
{

    /// <summary>
    /// Describes a File to Download by :    
    ///  - Name     
    ///  - Url Source 
    ///  - Destination    
    /// </summary>
    public class FileSourceDestination
    {
        #region Constructor

        /// <summary>
        /// Constructor of FileDownloadInfo
        /// </summary>
        public FileSourceDestination()
        {
        }

        /// <summary>
        /// Constructor of FileDownloadInfo
        /// </summary>
        /// <param name="FileSource">The Source of File</param>
        /// <param name="Destination">The File Destination (Root Directory or File Name)</param>
        public FileSourceDestination(string FileSource, string Destination)
        {
            source = FileSource;
            name = getFileName(source);
            if (File.Exists(Destination))
                destination = Destination;
            else
                destination = Destination + "\\" + name;
        }

        #endregion

        #region Variables


        /// <summary>
        /// The File's Name
        /// </summary>
        private string name;

        /// <summary>
        /// The File URL Source
        /// </summary>
        private string source;

        /// <summary>
        /// The File's Destination
        /// </summary>
        private string destination;

        #endregion

        #region Proprieties


        /// <summary>
        /// The File's Name
        /// </summary>
        public string Name
        {
            get
            {
                if (name == null || name == "")
                    name = getFileName(source);
                return name;
            }
            set
            {
                name = value;
            }
        }

        /// <summary>
        /// The File URL Source
        /// </summary>
        public string Source
        {
            get
            {
                return source;
            }
            set
            {
                source = value;
            }
        }

        /// <summary>
        /// The File's Destination
        /// </summary>
        public string Destination
        {
            get
            {
                return destination;
            }
            set
            {
                destination = value;
            }
        }

        #endregion

        #region Methodes

        /// <summary>
        /// Get the absolute Name of a File
        /// </summary>
        /// <param name="fullPath">The Full path of a File</param>
        /// <returns></returns>
        private string getFileName(string fullPath)
        {
            string FileName = "";
            if (fullPath != null)
            {
                int index1 = fullPath.LastIndexOf("/");
                int index2 = fullPath.LastIndexOf("\\");
                int index = Math.Max(index1, index2);
                FileName = fullPath.Substring(index + 1);
            }
            return FileName;
        }

        /// <summary>
        /// Determines whether the Symbol exists in the FileSourceDestination
        /// </summary>
        /// <param name="Symbol">The Symbol to chek</param>
        /// <returns>Bool</returns>
        public bool SymbolExist(string Symbol)
        {
                        return source.IndexOf(Symbol) != -1 || destination.IndexOf(Symbol) != -1;
        }

        /// <summary>
        /// Replaces all occurrences of a Symbol String in this instance, with another String.
        /// </summary>
        /// <param name="Symbol">The Symbol to be replaced.</param>
        /// <param name="Value">A String to replace all occurrences of Symbol.</param>
        /// <returns>A FileSourceDestination equivalent to this instance but with all instances of Symbol replaced with Value.</returns>
        public FileSourceDestination SymbolReplace(string Symbol,string Value)
        {
            FileSourceDestination result = new FileSourceDestination(source.Replace(Symbol, Value), destination.Replace(Symbol, Value));
            return result;
        }
        #endregion
    }
}